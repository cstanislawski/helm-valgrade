name: release helm-valgrade

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+"

jobs:
  build-and-release:
    name: build-and-release
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
          - goos: linux
            goarch: arm64
          - goos: darwin
            goarch: amd64
          - goos: darwin
            goarch: arm64
          - goos: windows
            goarch: amd64
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: "1.22.6"
      - run: make deps
      - name: build-binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          go build -o helm-valgrade ./cmd/valgrade
          tar czf helm-valgrade-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz helm-valgrade plugin.yaml
      - name: verify-artifacts
        run: |
          for archive in helm-valgrade-*.tar.gz; do
            echo "Verifying $archive"
            tar tvf "$archive"
          done
      - uses: actions/upload-artifact@v4
        with:
          name: helm-valgrade-${{ matrix.goos }}-${{ matrix.goarch }}
          path: helm-valgrade-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz

  create-release:
    name: create-release
    needs: build-and-release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
      - name: create-release-and-upload-assets
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          assets=$(find . -name "helm-valgrade-*.tar.gz")
          gh release create ${{ github.ref_name }} \
            --title "${{ github.ref_name }}" \
            --generate-notes \
            $assets

  update-plugin-yaml:
    name: update-plugin-yaml
    needs: create-release
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: update-version-and-push
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

          VERSION=${GITHUB_REF#refs/tags/v}
          sed -i "s/^version:.*$/version: \"$VERSION\"/" plugin.yaml

          git checkout -b update-plugin-yaml-$VERSION
          git add plugin.yaml
          git commit -m "Update plugin.yaml to version $VERSION"

          git push origin update-plugin-yaml-$VERSION

          gh pr create --base main --head update-plugin-yaml-$VERSION \
            --title "Update plugin.yaml to version $VERSION" \
            --body "Automated update of plugin.yaml for version $VERSION"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
